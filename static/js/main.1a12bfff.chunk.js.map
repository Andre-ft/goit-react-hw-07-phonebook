{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","App.module.css","redux/contacts/contacts-actions.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","App.js","redux/contacts/contacts-reducer.js","redux/store.js","contexts/auth/context.js","contexts/auth/avatar.png","contexts/auth/Provider.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","getVisibleContacts","allContacts","filter","normalizedFilter","toLowerCase","contact","includes","connect","contacts","items","contactList","dispatch","onDeleteContact","className","map","s","contactList__item","type","deleteButton","onClick","state","onSubmit","useState","setName","setNumber","btnEnable","setBtnEnable","nameInputId","numberInputId","handleChange","e","currentTarget","value","find","alert","checkName","form","preventDefault","htmlFor","input","pattern","title","required","onChange","button","disabled","actions","App","createReducer","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactReducer","devTools","process","persistor","persistStore","createContext","Provider","children","user","setUser","isLoggedIn","setIsLoggedIn","onLogIn","avatar","onLogOut","providerValue","useMemo","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.1a12bfff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__-POcN\",\"input\":\"ContactForm_input__1t8WA\",\"button\":\"ContactForm_button__2rf7u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList__item\":\"ContactList_contactList__item__HLiZS\",\"deleteButton\":\"ContactList_deleteButton__f9ry3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1DD2d\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n// import types from './contacts-types';\r\n\r\n// export const addContact = ({ name, number }) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// prepareCallback\r\nexport const addContact = createAction('contacts/add', ({ name, number }) => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\n// export const deleteContact = id => ({\r\n//   type: types.DELETE,\r\n//   payload: id,\r\n// });\r\n\r\nexport const deleteContact = createAction('contacts/delete');\r\n\r\n// export const changeFilter = value => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n\r\n// export default { addContact, deleteContact, changeFilter };\r\n","import React from 'react';\nimport s from './ContactList.module.css';\nimport { deleteContact} from '../../redux/contacts/contacts-actions'\nimport { connect } from 'react-redux';\n\n  \nconst ContactList = ({ contactList, onDeleteContact, filter }) => {\n\n  return (<>\n    <ul className=\"contactList\">\n      {contactList.map(({ id, name, number }) => (\n        <li key={id} className={s.contactList__item}>\n          {name} : {number}\n          <button\n            type=\"button\"\n            className={s.deleteButton}\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  </>)\n};\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return allContacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n}\n\n\nconst mapStateToProps = ({contacts:{filter, items}}) => {\n\n  return {\n    contactList: getVisibleContacts(items, filter), \n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onDeleteContact: (id) => dispatch(deleteContact(id)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React, {  useState } from 'react';\nimport shortid from 'shortid';\nimport { connect } from 'react-redux';\nimport s from './ContactForm.module.css';\nimport {addContact, deleteContact, changeFilter} from '../../redux/contacts/contacts-actions'\n\nfunction ContactForm({onSubmit, contactList}) {\n  // state = {\n  //   name: '',\n  //   number: '',\n  //   btnEnable: true,\n  // };\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [btnEnable, setBtnEnable] = useState(true);\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  const checkName = (name)=> {\n    const check = contactList.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n    if (check) {\n      setBtnEnable(false);\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    setBtnEnable(true);\n  }\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    name === 'name' && checkName(value);\n\n    switch (name) {\n      case 'name': setName(value);        \n        break;\n\n      case 'number': setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    onSubmit({name, number});\n\n    setName('');\n    setNumber('');\n  };\n\n    return (\n      <form className={s.form} onSubmit={handleSubmit}>\n        <label htmlFor={nameInputId} className={s.input}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleChange}\n            id={nameInputId}\n          />\n        </label>\n\n        <label htmlFor={numberInputId} className={s.input}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleChange}\n            id={numberInputId}\n          />\n        </label>\n        <button\n          type=\"submit\"\n          className={s.button}\n          disabled={!btnEnable}\n        >\n          Add contact\n        </button>\n      </form>\n    );\n}\n\n// export default ContactForm;\n\nconst mapStateToProps = state =>{\n return {\n   contactList: state.contacts.items,\n\n }\n}\nconst mapDispatchToProps = dispatch => {\nreturn {\n    onSubmit: ({name, number}) => dispatch(addContact({name, number}))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\nimport { changeFilter} from '../../redux/contacts/contacts-actions'\nimport { connect } from 'react-redux';\n\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    Find contacts by name\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\n\n// export default Filter;\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter\n})\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onChange: (e)=> dispatch(changeFilter(e.currentTarget.value))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport ContactList from './components/ContactList';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport s from './App.module.css';\nimport shortid from 'shortid';\nimport * as actions from './redux/contacts/contacts-actions';\n// import { addContact, deleteContact, changeFilter };\n\nfunction App({ contacts, filter, addContact, deleteContact }) {\n  // const [contacts, setContacts] = useState([]);\n  // const [filter, setFilter] = useState('');\n\n  // вместо useEffect используем persist\n  /*useEffect(() => {\n    if (!contacts.length) {\n      const savedContacts = localStorage.getItem('contacts');\n      const parsedContacts = JSON.parse(savedContacts);\n\n      if (parsedContacts) {\n        parsedContacts.map(({ name, number }) => addContact({ name, number }));\n        // setContacts(parsedContacts);\n      }\n      return;\n    }\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n}, [contacts]);\n  */\n\n  // const addContact = ({ name, number }) => {\n  //   const contact = {\n  //     id: shortid.generate(),\n  //     name,\n  //     number,\n  //   };\n\n  //   setContacts([contact, ...contacts]);\n  // };\n  /*\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n*/\n\n  // const deleteContact = contactId => {\n  //   const newContacts = contacts.filter(contact => contact.id !== contactId);\n  //   setContacts(newContacts);\n  // };\n\n  // const visibleContacts = getVisibleContacts();\n\n  return (\n    <div className={s.App}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList /*contactList={getVisibleContacts}*/ />\n    </div>\n  );\n}\n\n// export default App;\n\nconst mapStateToProps = state => ({\n  contacts: state.contacts.items,\n  filter: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addContact: ({ name, number }) =>\n    dispatch(actions.addContact({ name, number })),\n  deleteContact: () => dispatch(actions.deleteContact()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { addContact, deleteContact, changeFilter } from './contacts-actions';\r\nimport types from './contacts-types';\r\n\r\n// const filter = createReducer('', {\r\n//   [changeFilter]: (_, { payload }) => payload,\r\n// });\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst items = createReducer([], {\r\n  [addContact]: (state, { payload }) => [...state, payload],\r\n  [deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport contactReducer from './contacts/contacts-reducer';\r\nimport {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\n\r\n// const initialState = {\r\n//   contacts: {\r\n//     items: [],\r\n//     filter: '',\r\n//   },\r\n// };\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: persistReducer(persistConfig, contactReducer),\r\n// });\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\n// const itemsReducer = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case ADD:\r\n//       return [...state, payload];\r\n\r\n//     case DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filterReducer = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const contactReducer = combineReducers({\r\n//   items: itemsReducer,\r\n//   filter: filterReducer,\r\n// });\r\n\r\n// const rootReducer = combineReducers({ contacts: contactReducer });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import { createContext } from 'react';\n\nexport default createContext();\n","export default __webpack_public_path__ + \"static/media/avatar.e44fc4e2.png\";","import { useState, useMemo } from 'react';\nimport authContext from './context';\nimport avatar from './avatar.png';\n\nexport default function Provider({ children }) {\n  const [user, setUser] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const onLogIn = () => {\n    setUser({ name: 'Манго', avatar });\n    setIsLoggedIn(true);\n  };\n\n  const onLogOut = () => {\n    setUser(null);\n    setIsLoggedIn(false);\n  };\n\n  const providerValue = useMemo(() => {\n    return { user, isLoggedIn, onLogIn, onLogOut };\n  }, [isLoggedIn, user]);\n\n  return (\n    <authContext.Provider value={providerValue}>\n      {children}\n    </authContext.Provider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport AuthProvider from './contexts/auth/Provider';\nimport 'react-toastify/dist/ReactToastify.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AuthProvider>\n      <Provider store={store.store}>\n        <PersistGate loading={null} persistor={store.persistor}>\n          <BrowserRouter>\n            <App />\n          </BrowserRouter>\n        </PersistGate>\n      </Provider>\n    </AuthProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}